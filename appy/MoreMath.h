////////////////////////////////////////////////////////////////////////////////
//Dan Nielsen
//All-integer math operations.
//All matrices are dense unless otherwise noted.
//Notice that many simple operations are not implemented, because a multiply or
//a saxpy (e.g.) may need to be performed on fixed-point values of different
//formats.
//Reference:
//Arctangent method similar to that used in the Allegro library.
//FFT based on code from Tom Roberts, Malcolm Slaney, and Dimitrios Bouras.
////////////////////////////////////////////////////////////////////////////////
//TODO:
//Implement PowVec (power-of-2-sized vector) and PowMat operations
#pragma once
#include "Define.h"
#define MM_PI 0x3243f //16.16-fixed constant pi
#define MM_TWOPI 0x6487f //16.16-fixed constant 2*pi
#define MM_E 0x2b7e1 //16.16-fixed Euler constant
#define MM_SQRRTTWO 0x16aa0 //16.16-fixed sqrt(2)
#define MM_ONEOVERSQRRTTWO 0xb505 //16.16-fixed sqrt(1/2)
#define MM_SQRRTTHREE 0x1bb68 //16.16-fixed sqrt(3)
#define MM_ONEOVERSQRRTTHREE 0x93cd //16.16-fixed sqrt(1/3)
#define MM_SQRRTTWOOVERSQRRTTHREE 0xd106 //16.16-fixed sqrt(2/3)
#define MM_SQRRTTHREEOVERSQRRTTWO 0x13989 //16.16-fixed sqrt(3/2)
#define MM_ONEOVERSQRRTSIX 0x6883 //16.16-fixed sqrt(1/6)

//Input: unsigned .8-fixed
//Output: unsigned .8-fixed
static const unsigned char mmSCurveTable[]={
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,
    4,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8,  9,  9, 10, 11, 11,
   12, 13, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44,
   46, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 67, 68,
   70, 72, 73, 75, 77, 78, 80, 82, 84, 85, 87, 89, 91, 92, 94, 96,
   98,100,101,103,105,107,109,111,113,114,116,118,120,122,124,126,
  128,129,131,133,135,137,139,141,142,144,146,148,150,152,154,155,
  157,159,161,163,164,166,168,170,171,173,175,177,178,180,182,183,
  185,187,188,190,192,193,195,196,198,199,201,202,204,205,207,208,
  209,211,212,213,215,216,217,219,220,221,222,223,225,226,227,228,
  229,230,231,232,233,234,235,236,237,238,238,239,240,241,242,242,
  243,244,244,245,246,246,247,247,248,248,249,249,250,250,251,251,
  251,252,252,252,253,253,253,253,254,254,254,254,254,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255};

//Input: unsigned .8-fixed (All values are reduced by one to fit into a byte!)
//Output: unsigned 8-int (256 ticks=90 deg)
static const unsigned char mmAcosTable[]={
  255,254,253,253,252,251,251,250,249,249,248,247,247,246,246,245,
  244,244,243,242,242,241,240,240,239,239,238,237,237,236,235,235,
  234,233,233,232,232,231,230,230,229,228,228,227,226,226,225,224,
  224,223,222,222,221,221,220,219,219,218,217,217,216,215,215,214,
  213,213,212,211,211,210,209,209,208,207,207,206,205,205,204,203,
  203,202,201,201,200,199,199,198,197,197,196,195,195,194,193,193,
  192,191,190,190,189,188,188,187,186,186,185,184,184,183,182,181,
  181,180,179,179,178,177,176,176,175,174,174,173,172,171,171,170,
  169,168,168,167,166,165,165,164,163,162,162,161,160,159,159,158,
  157,156,156,155,154,153,152,152,151,150,149,149,148,147,146,145,
  144,144,143,142,141,140,140,139,138,137,136,135,134,134,133,132,
  131,130,129,128,127,127,126,125,124,123,122,121,120,119,118,117,
  116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,
  100, 99, 98, 97, 95, 94, 93, 92, 91, 90, 88, 87, 86, 85, 83, 82,
   81, 80, 78, 77, 75, 74, 73, 71, 70, 68, 67, 65, 63, 62, 60, 58,
   56, 55, 53, 51, 49, 46, 44, 42, 39, 37, 34, 31, 27, 23, 19, 13};

//Input: unsigned 9-int (512 halfticks=90 deg; high-precision angle!)
//Output: unsigned 16.16-fixed
static const int mmTanTable[]={
         0,     201,     402,     603,     804,    1005,    1206,    1407,
      1608,    1810,    2011,    2212,    2413,    2615,    2816,    3018,
      3219,    3421,    3622,    3824,    4026,    4228,    4430,    4632,
      4834,    5036,    5238,    5441,    5643,    5846,    6048,    6251,
      6454,    6657,    6861,    7064,    7267,    7471,    7675,    7879,
      8083,    8287,    8491,    8696,    8900,    9105,    9310,    9515,
      9721,    9926,   10132,   10338,   10544,   10751,   10957,   11164,
     11371,   11578,   11786,   11993,   12201,   12409,   12618,   12827,
     13035,   13245,   13454,   13664,   13874,   14084,   14294,   14505,
     14716,   14927,   15139,   15351,   15563,   15776,   15989,   16202,
     16415,   16629,   16843,   17058,   17273,   17488,   17704,   17919,
     18136,   18352,   18569,   18787,   19005,   19223,   19441,   19660,
     19880,   20099,   20320,   20540,   20761,   20983,   21205,   21427,
     21650,   21873,   22097,   22321,   22545,   22770,   22996,   23222,
     23449,   23676,   23903,   24131,   24360,   24589,   24819,   25049,
     25280,   25511,   25743,   25975,   26208,   26441,   26675,   26910,
     27145,   27381,   27618,   27855,   28092,   28331,   28570,   28809,
     29050,   29291,   29532,   29774,   30017,   30261,   30505,   30750,
     30996,   31242,   31489,   31737,   31986,   32235,   32485,   32736,
     32988,   33240,   33493,   33747,   34002,   34257,   34514,   34771,
     35029,   35288,   35548,   35809,   36070,   36333,   36596,   36860,
     37125,   37391,   37658,   37926,   38195,   38465,   38736,   39007,
     39280,   39554,   39829,   40105,   40382,   40660,   40939,   41219,
     41500,   41782,   42065,   42350,   42635,   42922,   43210,   43499,
     43789,   44081,   44373,   44667,   44962,   45259,   45556,   45855,
     46155,   46457,   46759,   47063,   47369,   47676,   47984,   48293,
     48604,   48917,   49230,   49546,   49862,   50181,   50500,   50822,
     51144,   51469,   51794,   52122,   52451,   52782,   53114,   53448,
     53784,   54121,   54460,   54801,   55143,   55487,   55834,   56181,
     56531,   56883,   57236,   57592,   57949,   58308,   58669,   59033,
     59398,   59765,   60134,   60506,   60879,   61255,   61633,   62013,
     62395,   62779,   63166,   63555,   63946,   64340,   64736,   65135,
     65535,   65939,   66345,   66753,   67164,   67578,   67994,   68413,
     68834,   69258,   69685,   70115,   70548,   70983,   71422,   71863,
     72307,   72755,   73205,   73659,   74115,   74575,   75038,   75504,
     75974,   76447,   76923,   77403,   77886,   78373,   78864,   79358,
     79855,   80357,   80862,   81371,   81884,   82401,   82922,   83447,
     83976,   84509,   85047,   85589,   86135,   86686,   87241,   87800,
     88365,   88934,   89507,   90086,   90669,   91258,   91851,   92450,
     93053,   93663,   94277,   94897,   95522,   96153,   96790,   97433,
     98081,   98735,   99396,  100063,  100736,  101415,  102101,  102793,
    103492,  104198,  104911,  105631,  106358,  107092,  107834,  108583,
    109340,  110104,  110877,  111658,  112446,  113244,  114049,  114864,
    115687,  116519,  117360,  118211,  119071,  119940,  120820,  121709,
    122609,  123519,  124439,  125371,  126313,  127267,  128232,  129209,
    130197,  131198,  132211,  133237,  134275,  135327,  136392,  137471,
    138564,  139671,  140792,  141929,  143081,  144248,  145431,  146630,
    147846,  149079,  150329,  151597,  152883,  154188,  155512,  156855,
    158217,  159601,  161005,  162430,  163877,  165347,  166839,  168355,
    169895,  171460,  173050,  174666,  176309,  177979,  179677,  181404,
    183160,  184947,  186765,  188615,  190499,  192416,  194367,  196355,
    198380,  200442,  202544,  204686,  206869,  209095,  211365,  213681,
    216043,  218453,  220913,  223425,  225990,  228610,  231286,  234021,
    236816,  239674,  242597,  245588,  248647,  251779,  254986,  258270,
    261634,  265082,  268616,  272241,  275959,  279774,  283691,  287713,
    291845,  296091,  300457,  304947,  309567,  314324,  319222,  324269,
    329471,  334837,  340373,  346089,  351993,  358094,  364404,  370933,
    377693,  384696,  391956,  399487,  407305,  415427,  423871,  432658,
    441807,  451343,  461291,  471678,  482534,  493891,  505787,  518259,
    531351,  545112,  559593,  574853,  590957,  607978,  625996,  645102,
    665398,  686999,  710035,  734655,  761030,  789353,  819849,  852780,
    888449,  927215,  969498, 1015802, 1066729, 1123011, 1185538, 1255414,
   1334015, 1423088, 1524876, 1642314, 1779313, 1941209, 2135471, 2372887,
   2669640, 3051161, 3559833, 4271947, 5340085, 7120270,10680572,21361345};

//Input: unsigned 8-int (256 ticks=90 deg)
//Output: unsigned .16-fixed
static const unsigned short mmSinTable[]={
      0,  402,  804, 1206, 1608, 2010, 2412, 2814,
   3215, 3617, 4018, 4420, 4821, 5222, 5622, 6023,
   6423, 6823, 7223, 7623, 8022, 8421, 8819, 9218,
   9616,10013,10410,10807,11204,11600,11995,12390,
  12785,13179,13573,13966,14359,14751,15142,15533,
  15923,16313,16702,17091,17479,17866,18253,18638,
  19024,19408,19792,20175,20557,20938,21319,21699,
  22078,22456,22833,23210,23586,23960,24334,24707,
  25079,25450,25820,26189,26557,26925,27291,27656,
  28020,28383,28745,29105,29465,29824,30181,30538,
  30893,31247,31600,31952,32302,32651,32999,33346,
  33692,34036,34379,34721,35061,35400,35738,36074,
  36409,36743,37075,37406,37736,38064,38390,38716,
  39039,39362,39682,40002,40319,40636,40950,41263,
  41575,41885,42194,42501,42806,43110,43412,43712,
  44011,44308,44603,44897,45189,45480,45768,46055,
  46340,46624,46906,47186,47464,47740,48015,48288,
  48558,48828,49095,49360,49624,49886,50146,50403,
  50660,50914,51166,51416,51665,51911,52155,52398,
  52639,52877,53114,53348,53581,53811,54040,54266,
  54491,54713,54933,55152,55368,55582,55794,56004,
  56212,56417,56621,56822,57022,57219,57414,57606,
  57797,57986,58172,58356,58538,58718,58895,59070,
  59243,59414,59583,59749,59913,60075,60235,60392,
  60547,60700,60850,60998,61144,61288,61429,61568,
  61705,61839,61971,62100,62228,62353,62475,62596,
  62714,62829,62942,63053,63162,63268,63371,63473,
  63571,63668,63762,63854,63943,64030,64115,64197,
  64276,64353,64428,64501,64571,64638,64703,64766,
  64826,64884,64939,64992,65043,65091,65136,65179,
  65220,65258,65294,65327,65358,65386,65412,65436,
  65457,65475,65491,65505,65516,65524,65531,65534};

//Input: unsigned 8-int (256 ticks=90 deg)
//Output: unsigned .16-fixed
static const unsigned short mmSinAcosTable[]={
  65535,65535,65534,65531,65528,65523,65517,65511,
  65503,65495,65485,65475,65463,65451,65437,65423,
  65407,65391,65373,65355,65335,65315,65293,65270,
  65247,65222,65197,65170,65142,65114,65084,65053,
  65021,64989,64955,64920,64884,64847,64809,64771,
  64731,64690,64647,64604,64560,64515,64469,64422,
  64373,64324,64273,64222,64169,64116,64061,64005,
  63948,63890,63831,63771,63710,63648,63584,63520,
  63454,63388,63320,63251,63181,63110,63038,62965,
  62890,62815,62738,62660,62581,62501,62419,62337,
  62253,62169,62083,61995,61907,61818,61727,61635,
  61542,61448,61352,61255,61157,61058,60958,60856,
  60753,60649,60543,60437,60329,60219,60109,59997,
  59884,59769,59654,59536,59418,59298,59177,59055,
  58931,58805,58679,58551,58421,58291,58158,58025,
  57889,57753,57615,57475,57334,57192,57048,56902,
  56755,56607,56457,56305,56152,55997,55840,55682,
  55523,55361,55198,55034,54867,54699,54529,54358,
  54184,54009,53833,53654,53473,53291,53107,52921,
  52733,52543,52351,52158,51962,51764,51564,51362,
  51159,50953,50744,50534,50322,50107,49890,49671,
  49449,49225,48999,48771,48540,48306,48070,47832,
  47591,47347,47101,46852,46600,46345,46088,45828,
  45565,45298,45029,44757,44482,44203,43921,43636,
  43347,43055,42760,42461,42158,41851,41541,41227,
  40908,40586,40259,39928,39593,39253,38908,38559,
  38204,37845,37481,37111,36735,36354,35967,35574,
  35175,34769,34357,33938,33511,33077,32635,32185,
  31727,31260,30783,30297,29801,29294,28776,28247,
  27704,27149,26579,25995,25394,24776,24140,23483,
  22805,22103,21375,20618,19829,19004,18138,17224,
  16255,15220,14105,12889,11539,10003, 8175, 5786};

#define mmSCurve(x) mmSCurveTable[x] //Valid only in input domain [0..255]
API
inline int mmAbs(int t) { return t<0? -t : t; };
API
inline int mmSgn(int t) { return (t>0)-(t<0); }
API
inline int mmMin(int a,int b) { return a<b? a : b; }
API
inline int mmMax(int a,int b) { return a>b? a : b; }
API
inline int mmClamp(int t,int lo,int hi) { return mmMin(mmMax(t,lo),hi); }
API
inline unsigned short mmUshortMin(unsigned short a,unsigned short b)
  { return a<b? a : b; }
API
inline unsigned short mmUshortMax(unsigned short a,unsigned short b)
  { return a>b? a : b; }
API
inline unsigned short mmUshortClamp(unsigned short t,unsigned short lo,unsigned short hi)
  { return mmMin(mmMax(t,lo),hi); }
API
int mmFloorLog2(unsigned int n);
API
int mmCeilingLog2(unsigned int n);
API
int mmAcos(int t);
API
unsigned int mmAtan(int y,int x);
API
int mmSin(int t);
API
short mmShortSin(int t);
API
int mmCos(int t);
API
int mmInterp(int a,int b,int t);
API
unsigned int mmSqrRt(unsigned int val);
API
unsigned int mmApproxSqrRt(unsigned int val);
API
unsigned int mmApproxRecipSqrRt(unsigned int val);
//API
short mmShortMul(short a,short b);
API
int mmFFT(short* fr,short* fi,short m,bool inverse);
API
int mmFFTR(short* f,int m,bool inverse);
API
void mmClearVec(int* v,int n);
API
void mmFillVec(int* v,int val,int n);
API
int mmDot(const int* va,const int* vb);
API
void mmCross(int* vr,const int* va,const int* vb);
API
unsigned int mmNorm2Vec2(const int* v);
API
unsigned int mmApproxNorm2Vec2(const int* v);
API
unsigned int mmNorm2Vec3(const int* v);
API
unsigned int mmNorm2Coord3(const int x,const int y,const int z);
API
unsigned int mmNorm2Vec4(const int* v);
API
void mmLinSpace(int* v,int begin,int end,int n);
API
void mmEvalVec(int* v,int (*f)(int),int begin,int end,int n);
API
void mmVecFunc(int* v,int (*f)(int),int n);
API
void mmTransposeMat2x2(int* m);
API
bool mmInvertMat2x2(int* mr,int* m);
API
void mmClearMat3x4(int* m);
API
void mmCopyMat3x4(int* mr,int* m);
API
void mmSetIdentityMat3x4(int* m);
API
void mmSetRotXMat3x4(int* mr,const int ang);
API
void mmSetRotYMat3x4(int* mr,const int ang);
API
void mmSetRotZMat3x4(int* mr,const int ang);
API
void mmSetRotMat3x4(int* mr,const int tta,const int phi,const int psi);
API
void mmSetPosMat3x4(int* mr,const int* v);
API
void mmQuatToMat3x4(int* q,int* m);
API
void mmQuatMul(int* qr,int* qa,int* qb);
API
void mmMat3x4FakeMul(int* mr,const int* ma,const int* mb);
API
void mmMat3x4FakeMulVec3(int* vr,const int* m,const int* v);
API
void mmMat3x4MulVec3NoTranslate(int* vr,const int* m,const int* v);
API
unsigned char mmApproxSCurve(const unsigned char t);
API
unsigned int mmExp2(int t);
API
unsigned int mmExp(int t);
API
void mmTrunShiftConvolveVec15(int* vr,int* va,int* vb);
API
void mmTrunShiftCorrelateVec15(int* vr,int* va,int* vb);
API
void mmNormalizeVec15(int* v);
